// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// PhoneSendGroupCallMessageRequest represents TL type `phone.sendGroupCallMessage#87893014`.
//
// See https://core.telegram.org/method/phone.sendGroupCallMessage for reference.
type PhoneSendGroupCallMessageRequest struct {
	// Call field of PhoneSendGroupCallMessageRequest.
	Call InputGroupCallClass
	// RandomID field of PhoneSendGroupCallMessageRequest.
	RandomID int64
	// Message field of PhoneSendGroupCallMessageRequest.
	Message TextWithEntities
}

// PhoneSendGroupCallMessageRequestTypeID is TL type id of PhoneSendGroupCallMessageRequest.
const PhoneSendGroupCallMessageRequestTypeID = 0x87893014

// Ensuring interfaces in compile-time for PhoneSendGroupCallMessageRequest.
var (
	_ bin.Encoder     = &PhoneSendGroupCallMessageRequest{}
	_ bin.Decoder     = &PhoneSendGroupCallMessageRequest{}
	_ bin.BareEncoder = &PhoneSendGroupCallMessageRequest{}
	_ bin.BareDecoder = &PhoneSendGroupCallMessageRequest{}
)

func (s *PhoneSendGroupCallMessageRequest) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.Call == nil) {
		return false
	}
	if !(s.RandomID == 0) {
		return false
	}
	if !(s.Message.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *PhoneSendGroupCallMessageRequest) String() string {
	if s == nil {
		return "PhoneSendGroupCallMessageRequest(nil)"
	}
	type Alias PhoneSendGroupCallMessageRequest
	return fmt.Sprintf("PhoneSendGroupCallMessageRequest%+v", Alias(*s))
}

// FillFrom fills PhoneSendGroupCallMessageRequest from given interface.
func (s *PhoneSendGroupCallMessageRequest) FillFrom(from interface {
	GetCall() (value InputGroupCallClass)
	GetRandomID() (value int64)
	GetMessage() (value TextWithEntities)
}) {
	s.Call = from.GetCall()
	s.RandomID = from.GetRandomID()
	s.Message = from.GetMessage()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*PhoneSendGroupCallMessageRequest) TypeID() uint32 {
	return PhoneSendGroupCallMessageRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*PhoneSendGroupCallMessageRequest) TypeName() string {
	return "phone.sendGroupCallMessage"
}

// TypeInfo returns info about TL type.
func (s *PhoneSendGroupCallMessageRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "phone.sendGroupCallMessage",
		ID:   PhoneSendGroupCallMessageRequestTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Call",
			SchemaName: "call",
		},
		{
			Name:       "RandomID",
			SchemaName: "random_id",
		},
		{
			Name:       "Message",
			SchemaName: "message",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *PhoneSendGroupCallMessageRequest) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode phone.sendGroupCallMessage#87893014 as nil")
	}
	b.PutID(PhoneSendGroupCallMessageRequestTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *PhoneSendGroupCallMessageRequest) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode phone.sendGroupCallMessage#87893014 as nil")
	}
	if s.Call == nil {
		return fmt.Errorf("unable to encode phone.sendGroupCallMessage#87893014: field call is nil")
	}
	if err := s.Call.Encode(b); err != nil {
		return fmt.Errorf("unable to encode phone.sendGroupCallMessage#87893014: field call: %w", err)
	}
	b.PutLong(s.RandomID)
	if err := s.Message.Encode(b); err != nil {
		return fmt.Errorf("unable to encode phone.sendGroupCallMessage#87893014: field message: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *PhoneSendGroupCallMessageRequest) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode phone.sendGroupCallMessage#87893014 to nil")
	}
	if err := b.ConsumeID(PhoneSendGroupCallMessageRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode phone.sendGroupCallMessage#87893014: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *PhoneSendGroupCallMessageRequest) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode phone.sendGroupCallMessage#87893014 to nil")
	}
	{
		value, err := DecodeInputGroupCall(b)
		if err != nil {
			return fmt.Errorf("unable to decode phone.sendGroupCallMessage#87893014: field call: %w", err)
		}
		s.Call = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode phone.sendGroupCallMessage#87893014: field random_id: %w", err)
		}
		s.RandomID = value
	}
	{
		if err := s.Message.Decode(b); err != nil {
			return fmt.Errorf("unable to decode phone.sendGroupCallMessage#87893014: field message: %w", err)
		}
	}
	return nil
}

// GetCall returns value of Call field.
func (s *PhoneSendGroupCallMessageRequest) GetCall() (value InputGroupCallClass) {
	if s == nil {
		return
	}
	return s.Call
}

// GetRandomID returns value of RandomID field.
func (s *PhoneSendGroupCallMessageRequest) GetRandomID() (value int64) {
	if s == nil {
		return
	}
	return s.RandomID
}

// GetMessage returns value of Message field.
func (s *PhoneSendGroupCallMessageRequest) GetMessage() (value TextWithEntities) {
	if s == nil {
		return
	}
	return s.Message
}

// PhoneSendGroupCallMessage invokes method phone.sendGroupCallMessage#87893014 returning error if any.
//
// See https://core.telegram.org/method/phone.sendGroupCallMessage for reference.
func (c *Client) PhoneSendGroupCallMessage(ctx context.Context, request *PhoneSendGroupCallMessageRequest) (bool, error) {
	var result BoolBox

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return false, err
	}
	_, ok := result.Bool.(*BoolTrue)
	return ok, nil
}
